Pqp = new Object();Pqp.CALL_ID = -1;Pqp.trace = function(xValue,level){  trace(xValue,level);};function trace(xValue,level){  var colors = ["#ff0000","#00ff00","#ff00FF","#FF8000"]  if (typeof console != "undefined"){    if ((Pqp.isNull(level)) || (level > colors.length-1)){      console.log(xValue);    }else{      console.log("%c"+xValue, "color:"+colors[level]);    }  }}Pqp.addClick = function(mc,callback,oBag){  var o = Pqp._globalOrContextualized(callback);  mc.on("click",{ct:o,bag:oBag},Pqp._onClick);  mc.css('cursor', 'pointer');};Pqp.removeClick = function(mc){  mc.off("click",Pqp._onClick);  mc.css('cursor', 'auto');};Pqp.geta = function(a) {  if (a instanceof String){    return [a];  }else if (typeof(a)=="string"){    return [a];  }else if (a instanceof Array){    return a;  }  return [a];};Pqp.isString = function(a){  if ((a instanceof String) || (typeof(a)=="string")){    return true;  }  return false;};Pqp.isNumber = function(a){  if ((a instanceof Number) || (typeof(a)=="number")){    return true;  }  return false;};Pqp.isArray = function(a){  if ((a instanceof Array) || (typeof(a)=="array")){    return true;  }  return false;};Pqp.isNull = function(xValue){  if ((xValue == null) || (xValue == undefined)){    return true;  }  return false;};Pqp.makeGetQueryString = function(o){  var s = "";  for (var a in o){    s+= a+"="+o[a]+"&";  }  return s;};Pqp._onClick = function(e){  var o = e.data.ct;  e.pqpbag = o;  e.bag = e.data.bag;  if (o.callback != undefined){    if (o.ct != undefined){      // callback con contesto      o.callback.call(o.ct,e);    }else{      // funzione normale      o.callback.call(null,e);    }  }  };Pqp.sendAndLoad = function(sPath,oData,callback,oBag,customParam){  // Restituisce a callback lSuccess,[oJson,error],oBag,additionalData  var oCall = new Object();  // Defaults  oCall.type = "GET";  oCall.dataType = "xml";  // Url  oCall.url = sPath;  // Dati da passare  if (oData){    oCall.data = oData;  }    // Callback  var o = Pqp._globalOrContextualized(callback);    if (o.callback){    oCall.success = Pqp._snlSuccess;    oCall.error = Pqp._snlError;    oCall.callback = o;  }    // Eventuale bag (altrimenti la crea)  var bag;  if (oBag){    bag = new Bag(oBag);  }else{    o = new Object();    bag = new Bag(o);  }  bag.callID = Pqp._getNextCallId();  if (callback.ct){    bag.ct = callback.ct;  }  oCall.bag = bag;    // Eventuali parametri da sovrascrivere  if (customParam){    for (var a in customParam){      oCall[a] = customParam[a];    }  }  // Effettua la chiamata  $.ajax(oCall);  return oCall.callID;};Pqp.shuffle = function(o){ 	for(var j, x, i = o.length; i; j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);	return o;};Pqp.rnd = function(max,min){  if (!min){     min = 0;  }  return Math.floor(Math.random() * (max - min + 1)) + min;};Pqp._globalOrContextualized = function(callback){  var o;  if (callback instanceof Function){    o = new Object();    o.callback = callback;    o.ct = undefined;  }else{    if (callback != undefined){      o = callback;    }else{      // nessuna funzione      o = new Object();      o.callback = undefined;      o.ct = undefined;    }  }  return o;};Pqp._getNextCallId = function(){  Pqp.CALL_ID++;  return Pqp.CALL_ID;};Pqp._snlSuccess = function(data, textStatus, jqXHR){  var o = $.xml2json(data);  Pqp._snlCallback(true,o,this,textStatus,jqXHR);};Pqp._snlError = function(jqXHR, textStatus, errorThrown){  Pqp._snlCallback(false,errorThrown,this,textStatus,jqXHR);};Pqp._snlCallback = function(lOkay,retVal,callContext,textStatus,jqXHR){  var o = callContext.callback;  var additionalData = new Object();  additionalData.textStatus = textStatus;  additionalData.jqXHR = jqXHR;    if (o.ct){    // callback con contesto    o.callback.call(o.ct,lOkay,retVal,callContext.bag,additionalData);  }else{    // funzione normale    o.callback.call(null,lOkay,retVal,callContext.bag,additionalData);  }  };Pqp.check = function(nProb){   if (nProb>=1){      return true;   }   if (nProb<=0){      return false;   }   var nSpace = 100000;   var nProd = (nProb*nSpace);   var nRnd = Pqp.range(0, nSpace);   return nRnd<nProd;};Pqp.range = function(nMin,nMax) { return (Pqp.rangeInt((nMin*1000.0),(nMax*1000.0)))/1000.0;};Pqp.rangeInt = function(nMin,nMax){	return Math.floor(Math.random() * (nMax - nMin + 1)) + nMin;};Pqp.replace = function(str,fnd,repl){	return Lng.safeReplace(str,fnd,repl);};Pqp.mettiPunti = function(input, sep, sepdec){  if (sep == null) {    sep = ".";  }  if (sepdec == null) {    sepdec = ",";  }  var num = input;  var minus = false;  if (num < 0) {    num *= -1;    minus = true  }  var dotPos = (num+"").split(".");  var dotU = dotPos[0];  var dotD = dotPos[1];  var commaFlag = dotU.length % 3;  var out;  if (commaFlag) {     out = dotU.substring(0, commaFlag);    if (dotU.length > 3) {       out += sep;    }  }else {    out = ""  }  for (var i=commaFlag; i < dotU.length; i+=3) {    out += dotU.substring(i, i+3);    if ( i < dotU.length - 3) {       out += sep;    }  }  if (minus) {    out = "-" + out;  }  if (dotD) {    return out + sepdec + dotD  }  return out};Pqp.carCon = function(mCf) {  var aNumLet = new Array();  var aNumeri1 = new Array();  var aNumeri2 = new Array();  var nSomma;  var nConta;  var cCifra;  var nPuntatore;  var nNp;  var nNd;  var nCf1;  var nCf2;  var nMlc;  nSomma = 0;  nConta = 1;  aNumLet.push("DUMMY");  aNumLet.push("0");  aNumLet.push("1");  aNumLet.push("2");  aNumLet.push("3");  aNumLet.push("4");  aNumLet.push("5");  aNumLet.push("6");  aNumLet.push("7");  aNumLet.push("8");  aNumLet.push("9");  aNumLet.push("A");  aNumLet.push("B");  aNumLet.push("C");  aNumLet.push("D");  aNumLet.push("E");  aNumLet.push("F");  aNumLet.push("G");  aNumLet.push("H");  aNumLet.push("I");  aNumLet.push("J");  aNumLet.push("K");  aNumLet.push("L");  aNumLet.push("M");  aNumLet.push("N");  aNumLet.push("O");  aNumLet.push("P");  aNumLet.push("Q");  aNumLet.push("R");  aNumLet.push("S");  aNumLet.push("T");  aNumLet.push("U");  aNumLet.push("V");  aNumLet.push("W");  aNumLet.push("X");  aNumLet.push("Y");  aNumLet.push("Z");  aNumLet.push("/");  aNumeri1.push("DUMMY");  aNumeri1.push(0);  aNumeri1.push(1);  aNumeri1.push(2);  aNumeri1.push(3);  aNumeri1.push(4);  aNumeri1.push(5);  aNumeri1.push(6);  aNumeri1.push(7);  aNumeri1.push(8);  aNumeri1.push(9);  aNumeri1.push(0);  aNumeri1.push(1);  aNumeri1.push(2);  aNumeri1.push(3);  aNumeri1.push(4);  aNumeri1.push(5);  aNumeri1.push(6);  aNumeri1.push(7);  aNumeri1.push(8);  aNumeri1.push(9);  aNumeri1.push(10);  aNumeri1.push(11);  aNumeri1.push(12);  aNumeri1.push(13);  aNumeri1.push(14);  aNumeri1.push(15);  aNumeri1.push(16);  aNumeri1.push(17);  aNumeri1.push(18);  aNumeri1.push(19);  aNumeri1.push(20);  aNumeri1.push(21);  aNumeri1.push(22);  aNumeri1.push(23);  aNumeri1.push(24);  aNumeri1.push(25);  aNumeri1.push(0);  aNumeri2.push("DUMMY");  aNumeri2.push(1);  aNumeri2.push(0);  aNumeri2.push(5);  aNumeri2.push(7);  aNumeri2.push(9);  aNumeri2.push(13);  aNumeri2.push(15);  aNumeri2.push(17);  aNumeri2.push(19);  aNumeri2.push(21);  aNumeri2.push(1);  aNumeri2.push(0);  aNumeri2.push(5);  aNumeri2.push(7);  aNumeri2.push(9);  aNumeri2.push(13);  aNumeri2.push(15);  aNumeri2.push(17);  aNumeri2.push(19);  aNumeri2.push(21);  aNumeri2.push(2);  aNumeri2.push(4);  aNumeri2.push(18);  aNumeri2.push(20);  aNumeri2.push(11);  aNumeri2.push(3);  aNumeri2.push(6);  aNumeri2.push(8);  aNumeri2.push(12);  aNumeri2.push(14);  aNumeri2.push(16);  aNumeri2.push(10);  aNumeri2.push(22);  aNumeri2.push(25);  aNumeri2.push(24);  aNumeri2.push(23);  aNumeri2.push(0);  while (nConta<16) {    cCifra = mCf.charAt(nConta-1);    nPuntatore = Pqp.ascan(aNumLet, cCifra);    if (nPuntatore == 0) {      return "";    }    nNp = aNumeri1[nPuntatore];    nNd = aNumeri2[nPuntatore];    if (nConta/2>Pqp.parteInt(nConta/2)) {      nSomma = nSomma+nNd;    } else {      nSomma = nSomma+nNp;    }    nConta = nConta+1;  }  nCf1 = nSomma/26;  nCf2 = nSomma-Pqp.parteInt(nCf1)*26+11;  nMlc = aNumLet[nCf2];  return nMlc;};Pqp.parteInt = function(nNumero) {  var aTmp;  aTmp = (""+nNumero).split(".");  return parseInt(aTmp[0]);};Pqp.ascan = function(aNumLet, cCifra) {  var x, lTrovato;  lTrovato = false;  for (x=0; x<aNumLet.length; x++) {    if (aNumLet[x] == cCifra) {      lTrovato = true;      break;    }  }  if (lTrovato) {    return x;  } else {    return 0;  }};Pqp.ascSeq = function(sString) {  var x, sCode, sTmp;  sCode = "";  for (x=0; x<sString.length; x++) {    sTmp = ""+sString.charCodeAt(x);    if (sTmp.length<3) {      if (sTmp.length<2) {        sTmp = "00"+sTmp;      } else {        sTmp = "0"+sTmp;      }    }    sCode = sCode+sTmp;  }  return sCode;};Pqp.charSeq = function(sString) {  var sTmp, x, sChar;  sTmp = "";  for (x=0; x<sString.length/3; x++) {    sChar = parseInt(Pqp.removeZero(sString.substr(x*3, 3)));    sTmp = sTmp+String.fromCharCode(sChar);  }  return sTmp;};Pqp.removeZero = function(sString) {  var sTmp, x, lTrovato;  lTrovato = false;  for (x=0; x<sString.length; x++) {    if (sString.charAt(x) != "0") {      lTrovato = true;      break;    }  }  if (lTrovato) {    sTmp = sString.substr(x);  } else {    sTmp = sString;  }  return parseInt(sTmp);};Pqp.padr = function(sString, sChar, nQuanti) {  var n;  n = sString.length;  for (var x = 0; x<(nQuanti-n); x++) {    sString = sChar+sString;  }  return sString;};Pqp.getCheck = function(s) {  var s1 = s.toUpperCase();  s1 = Pqp.soloCharNumber(s1);  var nQuanti = s1.length % 15;  for (x=0; x<15-nQuanti; x++) {    s1 = s1+"F";  }  var sControllo = "";  for (var x=1; x<=(s1.length/15); x++) {    sControllo = sControllo+Pqp.carCon(s1.substr(x*15-15, 15));  }   s1 = sControllo+sControllo.length;  return s1;};Pqp.soloCharNumber = function(s) {  var sRet = "";  for (var x = 0; x < s.length; x++) {    var c = s.charAt(x);    if (((c >= "0") && (c <= "9")) || ((c >= "A") && (c <= "Z"))) {      sRet += c;    }  }  return sRet;};Pqp.cripta = function(s) {  return Pqp.uEncode8(s, 6006);};Pqp.decripta = function(s) {  return Pqp.uDecode8(s, 6006);};Pqp.uEncode8 = function(str, k) {  k = k%256;  var ret = "";  for (var i = 0; i<str.length; i++) {    var u = str.charCodeAt(i) ^ k;    var s = u.toString(16);    while (s.length<2) {      s = "0"+s;    }    ret += s;  }  return ret;};Pqp.uDecode8 = function(str, k) {  k = k%256;  var ret = "";  for (var i = 0; i<str.length; i += 2) {    var s = "";    for (var j = 0; j<2; j++) {      s += str.charAt(i+j);    }    var u = parseInt(s, 16) ^ k;    ret += String.fromCharCode(u);  }  return ret;};Pqp.utf8Encode = function(s) {  var sRet="";  for (var x=0; x<s.length; x++) {     var c=s.charAt(x);     var n=c.charCodeAt(0);     if ((n>=32) &&  (n<=127)) {        sRet+=c;     }else{        sRet+= "&#"+n+";";     }  }  return sRet;};Pqp.dataora = function(dt) {  var sRet = "" + dt.getFullYear();  var sTmp = ("0" + (dt.getMonth()+1));  sTmp = sTmp.substr(sTmp.length - 2,2);  sRet +=  sTmp;  sTmp = ("0"+dt.getDate());  sTmp = sTmp.substr(sTmp.length - 2,2);  sRet +=  sTmp;  sTmp = ("0"+dt.getHours());  sTmp = sTmp.substr(sTmp.length - 2,2);  sRet +=  sTmp;  sTmp = ("0"+dt.getMinutes());  sTmp = sTmp.substr(sTmp.length - 2,2);  sRet +=  sTmp;  sTmp = ("0"+dt.getSeconds());  sTmp = sTmp.substr(sTmp.length - 2,2);  sRet +=  sTmp;  return sRet;};